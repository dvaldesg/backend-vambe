// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  output        = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum CommercialSector {
  RETAIL
  MANUFACTURING
  FINANCIAL_SERVICES
  HEALTHCARE
  EDUCATION
  TECHNOLOGY
  GOVERNMENT
  NON_PROFIT
  PROFESSIONAL_SERVICES
  DESIGN
  MEDIA_AND_ENTERTAINMENT
  TOURISM
  TRANSPORTATION
  AGRICULTURE
  ENERGY
  SECURITY
  EVENTS
  CONSTRUCTION
  LOGISTICS
  REAL_ESTATE
  TELECOMMUNICATIONS
  HOSPITALITY
  INSURANCE
  FOOD_AND_BEVERAGE
  OTHER
}

enum LeadSource {
  REFERRAL
  ORGANIC_SEARCH
  SOCIAL_MEDIA
  PAID_AD
  EVENT
  COLD_OUTREACH
  PARTNER
  CONFERENCE
  OTHER
}

enum InterestReason {
  PRICE
  FEATURES
  SUPPORT
  SCALABILITY
  SECURITY
  COMPLIANCE
  ROI
  USER_EXPERIENCE
  EFFICIENCY
  AUTOMATION
  PERSONALIZATION
  INTEGRATION
  QUALITY
  CUSTOMER_SATISFACTION
  TIME_SAVINGS
  OTHER
}

enum VambeModel {
  AXIS
  MERCUR
  IRIS
  API
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String
  role  Role   @default(USER)

  firstName String?
  lastName  String?

  @@map("users")
}

model Salesman {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  meetings ClientMeeting[]

  @@map("salesmen")
}

model ClientMeeting {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  email String
  phone String

  salesmanName String
  salesmanId   Int
  salesman     Salesman @relation(fields: [salesmanId], references: [id])

  date   DateTime
  closed Boolean  @default(false)

  transcription String? @db.Text

  classification ClientClassification?

  @@map("meetings")
}

model ClientClassification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  commercialSector CommercialSector
  leadSource       LeadSource
  interestReason   InterestReason

  clientMeetingId Int           @unique
  clientMeeting   ClientMeeting @relation(fields: [clientMeetingId], references: [id], onDelete: Cascade)

  hasDemandPeaks    Boolean @default(false)
  hasSeasonalDemand Boolean @default(false)

  estimatedDailyInteractions   Int @default(0)
  estimatedWeeklyInteractions  Int @default(0)
  estimatedMonthlyInteractions Int @default(0)

  hasTechTeam Boolean     @default(false)
  vambeModel  VambeModel?

  isPotentialClient Boolean @default(false)
  isProblemClient   Boolean @default(false)
  isLostClient      Boolean @default(false)

  shouldBeContacted Boolean @default(false)

  confidenceScore Float?
  modelVersion    String?

  @@map("client_classifications")
}
